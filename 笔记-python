1. dir函数能够返回对象的名称列表，里面的函数，变量等
  # 给出 sys 模块中的属性名称
  >>> dir(sys)

  dir() 当前模块的属性名称

  del能够删除一个变量或者名称
  e.g.
  a=5
  del a
  #a就不存在了

  var()也可以返回类的属性，但并不是所有类都能使用这个函数
  
2. 包
包是一个包含模块和一个特殊的__init__.py文件的文件夹

3.字典
d = {1:'a'}
删除 del d[1]  #这里根据字典的键值来删除键值对
修改 d.update({3:'yy'})
print(d)  ---> {1:'a',3:'yy'}

分别访问键值对并且得到列表
name=[]
address=[]
for key,value in d.item():
  name.append(key)
  address.append(value)
print(name)
print(address)

4.序列
序列的主要作用是资格测试，也就是in or not in 和索引操作，元组，列表，字符串都是序列
能够进行索引取值切片处理

5. 集合
当元素的存在比个数和顺序更加重要的时候，使用集合，检测元素的情况和资格，检查是否是其它集合的子集，两个集合的交集等
set1.issuperset(set2)  #set2是set1的子集
set1&set2  交集
set1.add('a')    添加
set1.remove('a')   删除

6. 引用
一个变量对应一个对象，还对应一个存储地址id

如果你想要创建一个复杂对象的副本（复杂对象：序列，简单对象：int等），必须使用切片操作来制作副本，如果你仅仅使用一个变量名赋予给另外一个名称，
那么他们只会查询同一个地址，之后进行的操作都是对同一个对象进行操作，之后会造成麻烦

e.g.
s=['a','s','r','f']
d=s
b=s[::]

print('{}\n{}\n{}\n'.format(s,d,b))

s.append('eee')

print('{}\n{}\n{}\n'.format(s,d,b))

d.append('ooo')

print('{}\n{}\n{}\n'.format(s,d,b))

del b[1]

print('{}\n{}\n{}\n'.format(s,d,b))



